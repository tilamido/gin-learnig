项目结构
my-social-network/
├── backend/              # 后端目录
│   ├── api/              # 控制器层，处理请求、返回响应
│   ├── config/           # 配置文件，存放数据库配置、服务器配置等
│   ├── dao/              # 数据访问对象，与数据库交互，执行 SQL 查询等
│   ├── middleware/       # 中间件，例如身份验证、日志记录等
│   ├── models/           # 模型层，定义数据结构和 ORM 模型
│   ├── routes/           # 路由配置，定义 API 路径与处理函数的映射
│   ├── util/             # 工具类，如 JWT 生成和验证、密码加密等
│   ├── Dockerfile        # Docker后端配置
│   ├── go.mod            # 后台包
│   ├── go.sum            # 后台插件
│   ├── main.go           # 后台入口
├── frontend/             # 前端目录（Vue.js）
│   ├── node_modules/     # 存放项目依赖的 npm 包，通过运行 npm install 安装
│   ├── public/           # 存放静态资源，如 HTML 入口文件、图标等，这些资源在构建过程中一般会被复制到输出目录
│   ├── src/              # 存放 Vue.js 项目的源代码
│   │   ├── assets/       # 存放静态资源文件，如图片、样式表等，可以被 Webpack 构建过程引用
│   │   ├── components/   # 存放 Vue 组件，这些组件可以在不同的视图中重复使用
│   │   ├── router/       # 存放 Vue Router 配置文件，定义 URL 路径与组件之间的映射关系
│   │   ├── views/        # 存放应用的页面视图组件，通常对应路由的不同路径
│   │   ├── App.vue       # 主组件，所有页面组件都是在这个组件下进行切换的
│   │   └── main.js       # Vue.js 应用的入口文件，创建 Vue 实例、导入组件等
│   ├── babel.config.js   # Babel 配置文件，用于将 ES6+ 代码转换成广泛支持的 JavaScript 版本
│   ├── Dockerfile        # Docker前端配置
│   ├── jsconfig.json     # 为 VS Code 提供项目的 JS 代码基础配置，比如路径别名等
│   ├── package-lock.json # 锁定安装的 npm 包版本，确保其他开发人员安装相同版本的包
│   ├── package.json      # 定义项目的 npm 依赖、脚本等
│   ├── README.md         # 项目的 README 文件，通常包含项目说明、构建步骤等
│   └── vue.config.js     # Vue CLI 的配置文件，用于自定义 Vue CLI 项目的构建、开发服务器等配置
├──  redis/                # Redis配置文件（可选），用于存储会话、缓存等
└──  mysql/                # MySQL初始化脚本，用于创建数据库和表

技术栈
后端: Go (使用Gin框架和GORM)
前端: Vue3.js
数据库: MySQL
缓存: Redis (用于存储点赞数和快速读取)
容器化: Docker

核心功能实现
用户认证:
使用Gin框架实现RESTful API，处理登录、注册、修改密码等请求。
使用JWT（Json Web Tokens）进行用户认证。
存储加密后的密码。
发布朋友圈:
用户可以发布文字、图片等信息。
信息存储在MySQL中。
浏览朋友圈:
用户可以浏览自己和好友的朋友圈。
可以根据点赞数进行排序。
点赞功能:
利用Redis实现高性能的点赞功能。
点赞数可以实时更新，并可以根据点赞数对朋友圈进行排序。
个人内容管理:
用户可以管理自己发布的朋友圈内容，比如删除或修改。
Docker容器化:
使用Docker容器化后端应用、前端应用、MySQL和Redis。
使用Docker Compose来定义和运行多容器Docker应用程序。